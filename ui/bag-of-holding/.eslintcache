[{"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/index.js":"1","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/App.js":"2","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/reportWebVitals.js":"3","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/items.js":"4","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/itemtable/itemtable.js":"5","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/inventory.js":"6","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/header.js":"7","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/authbutton.js":"8","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/authcontext.js":"9"},{"size":778,"mtime":1612155287665,"results":"10","hashOfConfig":"11"},{"size":1393,"mtime":1612155249025,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1611543270402,"results":"13","hashOfConfig":"11"},{"size":1773,"mtime":1611719685316,"results":"14","hashOfConfig":"11"},{"size":8165,"mtime":1612143120885,"results":"15","hashOfConfig":"11"},{"size":9399,"mtime":1612144815805,"results":"16","hashOfConfig":"11"},{"size":728,"mtime":1612152833505,"results":"17","hashOfConfig":"11"},{"size":2940,"mtime":1612152581755,"results":"18","hashOfConfig":"11"},{"size":101,"mtime":1612151517595,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uteh6a",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/index.js",[],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/App.js",["40"],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/reportWebVitals.js",[],["41","42"],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/items.js",[],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/itemtable/itemtable.js",[],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/inventory.js",["43","44"],"import React, { useState, useEffect } from 'react';\nimport { forwardRef } from 'react';\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport MaterialTable from \"material-table\";\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nimport axios from 'axios'\nimport Alert from '@material-ui/lab/Alert';\nimport { Button, Card, CardContent, CardHeader, Typography } from '@material-ui/core';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n    },\n    details: {\n        display: \"flex\",\n        flexDirection: \"row\",\n    },\n}));\n\n\nconst api = axios.create({\n    baseURL: `http://localhost:8080/`\n})\n\nconst tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\n\nexport default function InventoryTable() {\n\n    const classes = useStyles();\n\n    const [data, setData] = useState([]); //table data\n    const [items, setItems] = useState([])    // Item data for predicting item fill\n    const [selected, setSelected] = useState({})\n    const [costTotal, setCostTotal] = useState([])\n\n    //for error handling\n    const [iserror, setIserror] = useState(false)\n    const [errorMessages, setErrorMessages] = useState([])\n\n    const sumCost = (items) => {\n        setCostTotal([items.reduce((a, b) => a + (b.Item.cost * b.count || 0), 0)])\n    }\n\n    const buyItem = () => {\n        // No object has been selected yet.\n        if (Object.keys(selected).length === 0 && selected.constructor === Object) {\n            setErrorMessages([\"Please Select an Item\"])\n            setIserror(true)\n            return\n        }\n        // Purchase the selected item\n        api.post(\"/buy/\", { \"item_id\": selected.ID }, {\n            headers: {\n                authorization: \"bearer \" + window.localStorage.getItem('authToken')\n            }\n        })\n            .then(res => {\n                console.log(res)\n                setData(res.data.data)\n                setIserror(false)\n                sumCost(res.data.data)\n            })\n    }\n\n    const onAutofillChange = (event, values) => {\n        setSelected(values)\n    }\n\n    const getItemNames = () => {\n        api.get(\"/names/\")\n            .then(res => {\n                setItems(res.data.items)\n            })\n            .catch(error => {\n                setErrorMessages([\"Cannot load item names\"])\n                setIserror(true)\n            })\n    }\n\n    const getInventory = () => {\n        api.get(\"/inventory/\", {\n            headers: {\n                authorization: \"bearer \" + window.localStorage.getItem('authToken')\n            }\n        })\n            .then(res => {\n                setData(res.data.data)\n                sumCost(res.data.data)\n            })\n            .catch(error => {\n                setErrorMessages([\"Cannot load inventory data\"])\n                setIserror(true)\n            })\n    }\n\n    const handleRowDelete = (oldData) => {\n        api.post(\"/sell/\", { \"item_id\": oldData.item_id }, {\n            headers: {\n                authorization: \"bearer \" + window.localStorage.getItem('authToken')\n            }\n        })\n            .then(res => {\n                console.log(\"made it\")\n                const dataDelete = [...data];\n                oldData.count--\n                if (oldData.count === 0) {\n                    const index = oldData.tableData.id;\n                    dataDelete.splice(index, 1);\n                    setData([...dataDelete]);\n                }\n                console.log(\"Finished?\")\n                sumCost(dataDelete)\n            })\n            .catch(error => {\n                setErrorMessages([\"Delete failed! Server error\"])\n                setIserror(true)\n            })\n    }\n\n    useEffect(() => {\n        // Load the inventory Data\n        getInventory()\n        // Get item names for use in the purchase dropdown\n        getItemNames()\n    }, [])\n\n    var columns = [\n        { title: \"id\", field: \"id\", hidden: true },\n        { title: \"user_id\", field: \"user_id\", hidden: true },\n        { title: \"item_id\", field: \"user_id\", hidden: true },\n        { title: \"Item Name\", field: \"Item.name\" },\n        { title: \"Cost\", field: \"Item.cost\", type: \"numeric\" },\n        { title: \"Count\", field: \"count\", type: \"numeric\" }\n    ]\n\n    return (\n        <div className=\"App\">\n            <Grid container spacing={3}>\n                <Grid item xs={2} />\n                <Grid item xs={4}>\n                    <Card className={classes.root}>\n                        <CardHeader title=\"Purchase an Item\" />\n                        <div className={classes.details}>\n                            <CardContent>\n                                <Autocomplete\n                                    id=\"purchase-selection\"\n                                    options={items}\n                                    getOptionLabel={(option) => option.Name}\n                                    style={{ width: 300 }}\n                                    onChange={onAutofillChange}\n                                    renderInput={(params) => <TextField {...params} label=\"Item to purchase\" variant=\"outlined\" />}\n                                />\n                            </CardContent>\n                            <CardContent>\n                                <Button variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={buyItem}>\n                                    Purchase\n                                </Button>\n                            </CardContent>\n                        </div>\n                    </Card>\n\n                </Grid>\n                <Grid item xs={4}>\n                    <Card>\n                        <CardHeader title=\"Inventory Total Cost\" />\n                        <div className={classes.details}>\n                            <CardContent>\n                                <Typography variant=\"h4\">{costTotal}</Typography>\n                            </CardContent>\n                        </div>\n                    </Card>\n                </Grid>\n                <Grid item xs={1} />\n                <Grid item xs={2} />\n                <Grid item xs={8}>\n                    <div>\n                        {iserror &&\n                            <Alert severity=\"error\">\n                                {errorMessages.map((msg, i) => {\n                                    return <div key={i}>{msg}</div>\n                                })}\n                            </Alert>\n                        }\n                    </div>\n                    <MaterialTable\n                        title=\"Items Owned\"\n                        columns={columns}\n                        data={data}\n                        icons={tableIcons}\n                        editable={{\n                            onRowDelete: (oldData) =>\n                                new Promise((resolve) => {\n                                    handleRowDelete(oldData)\n                                    resolve()\n                                }),\n                        }}\n                        options={{\n                            actionsColumnIndex: -1\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={1}></Grid>\n            </Grid >\n        </div >\n    )\n}","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/header.js",[],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/authbutton.js",["45","46"],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/authcontext.js",[],{"ruleId":"47","severity":1,"message":"48","line":1,"column":17,"nodeType":"49","messageId":"50","endLine":1,"endColumn":26},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"47","severity":1,"message":"55","line":27,"column":22,"nodeType":"49","messageId":"50","endLine":27,"endColumn":30},{"ruleId":"56","severity":1,"message":"57","line":161,"column":8,"nodeType":"58","endLine":161,"endColumn":10,"suggestions":"59"},{"ruleId":"47","severity":1,"message":"60","line":8,"column":12,"nodeType":"49","messageId":"50","endLine":8,"endColumn":20},{"ruleId":"56","severity":1,"message":"61","line":22,"column":8,"nodeType":"58","endLine":22,"endColumn":10,"suggestions":"62"},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","no-native-reassign",["63"],"no-negated-in-lhs",["64"],"'useTheme' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getInventory'. Either include it or remove the dependency array.","ArrayExpression",["65"],"'loggedIn' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setLoggedIn'. Either include it or remove the dependency array.",["66"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},{"desc":"69","fix":"70"},"Update the dependencies array to be: [getInventory]",{"range":"71","text":"72"},"Update the dependencies array to be: [setLoggedIn]",{"range":"73","text":"74"},[5966,5968],"[getInventory]",[651,653],"[setLoggedIn]"]