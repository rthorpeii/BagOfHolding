[{"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/index.js":"1","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/App.js":"2","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/reportWebVitals.js":"3","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/items.js":"4","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/itemtable/itemtable.js":"5","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/header.js":"6","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/authbutton.js":"7","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/authcontext.js":"8","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/character-form.js":"9","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/inventory/inventory.js":"10","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/character-table.js":"11","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/api-client.js":"12"},{"size":778,"mtime":1612155287665,"results":"13","hashOfConfig":"14"},{"size":1652,"mtime":1612233898902,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1611543270402,"results":"16","hashOfConfig":"14"},{"size":1773,"mtime":1611719685316,"results":"17","hashOfConfig":"18"},{"size":8025,"mtime":1612240386922,"results":"19","hashOfConfig":"14"},{"size":728,"mtime":1612152833505,"results":"20","hashOfConfig":"14"},{"size":3022,"mtime":1612235575982,"results":"21","hashOfConfig":"14"},{"size":101,"mtime":1612151517595,"results":"22","hashOfConfig":"14"},{"size":1187,"mtime":1612227463162,"results":"23","hashOfConfig":"18"},{"size":12099,"mtime":1612240357642,"results":"24","hashOfConfig":"14"},{"size":6398,"mtime":1612240454702,"results":"25","hashOfConfig":"14"},{"size":171,"mtime":1612241851402,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1foc4zi",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uteh6a",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"29"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/index.js",[],["54","55"],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/App.js",[],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/reportWebVitals.js",[],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/items.js",[],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/itemtable/itemtable.js",[],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/header.js",[],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/authbutton.js",["56","57"],"import React, { useContext, useEffect } from 'react';\nimport AuthContext from './authcontext.js'\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\n\nvar jwt = require('jsonwebtoken');\n\nfunction AuthButton() {\n    const {loggedIn, setLoggedIn} = useContext(AuthContext)\n\n    useEffect(() => {\n        const token = localStorage.getItem('authToken');\n        if (token === null) {\n            setLoggedIn(false)\n            return\n        }\n        var decodedToken = jwt.decode(token, { complete: true })\n        var dateNow = new Date();\n\n        if (decodedToken.exp < dateNow.getTime()) {\n            setLoggedIn(true)\n        }\n    }, [])\n\n    const refreshTokenSetup = (res) => {\n        // Timing to renew access token\n        let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\n\n        const refreshToken = async () => {\n            const newAuthRes = await res.reloadAuthResponse();\n            refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\n            console.log('newAuthRes:', newAuthRes);\n            // saveUserToken(newAuthRes.access_token);  <-- save new token\n            localStorage.setItem('authToken', newAuthRes.id_token);\n\n            // Setup the other timer after the first one\n            setTimeout(refreshToken, refreshTiming);\n        };\n\n        // Setup first refresh timer\n        setTimeout(refreshToken, refreshTiming);\n    };\n\n    const responseGoogle = (response) => {\n        console.log(response);\n    }\n\n    const onLoginSuccess = (response) => {\n        // console.log(\"Success: \" + JSON.stringify(response))\n        window.localStorage.setItem('authToken', response.tokenObj.id_token);\n        refreshTokenSetup(response);\n        setLoggedIn(true)\n    }\n\n    const onLogoutSuccess = (response) => {\n        window.localStorage.removeItem('authToken')\n        setLoggedIn(false)\n    }\n    return (\n        <AuthContext.Consumer>\n            {({ loggedIn, setLoggedIn }) => (\n                <div>\n                    { loggedIn ?\n                        <GoogleLogout\n                            clientId=\"1090301103642-op1uhu99i3naegpk86siaqqf4nddn0c1.apps.googleusercontent.com\"\n                            buttonText='Logout'\n                            onLogoutSuccess={onLogoutSuccess}\n                            onFailure={responseGoogle}\n                            theme=\"dark\"\n                        />\n                        : <GoogleLogin\n                            clientId=\"1090301103642-op1uhu99i3naegpk86siaqqf4nddn0c1.apps.googleusercontent.com\"\n                            buttonText=\"Login\"\n                            onSuccess={onLoginSuccess}\n                            onFailure={responseGoogle}\n                            cookiePolicy={'single_host_origin'}\n                            isSignedIn={true}\n                            theme=\"dark\"\n                        />\n                    }\n                </div>\n            )}\n        </AuthContext.Consumer>\n    )\n\n\n\n}\n\nexport default AuthButton;","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/authcontext.js",[],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/character-form.js",[],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/inventory/inventory.js",["58","59"],"import React, { useState, useEffect } from 'react';\nimport { forwardRef } from 'react';\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport MaterialTable from \"material-table\";\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nimport ApiClient from '../api-client'\nimport Alert from '@material-ui/lab/Alert';\nimport { Button, Card, CardContent, CardHeader, Typography } from '@material-ui/core';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n    },\n    details: {\n        display: \"flex\",\n        flexDirection: \"row\",\n    },\n    mergecard: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        border: \"none\",\n        boxShadow: \"none\"\n    },\n}));\n\nconst tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\n\nexport default function InventoryTable() {\n\n    const classes = useStyles();\n\n    const [data, setData] = useState([]); //table data\n    const [items, setItems] = useState([])    // Item data for predicting item fill\n    const [characters, setCharacters] = useState([])\n    const [selectedItem, setSelectedItem] = useState({})\n    const [selectedCharacter, setSelectedCharacter] = useState({})\n    const [costTotal, setCostTotal] = useState([])\n\n    //for error handling\n    const [iserror, setIserror] = useState(false)\n    const [errorMessages, setErrorMessages] = useState([])\n\n    const sumCost = (items) => {\n        setCostTotal([items.reduce((a, b) => a + (b.Item.cost * b.count || 0), 0)])\n    }\n\n    const buyItem = () => {\n        \n        if (Object.keys(selectedItem).length === 0 && selectedItem.constructor === Object) {\n            setErrorMessages([\"Please Select an Item\"])\n            setIserror(true)\n            return\n        }\n        if (Object.keys(selectedCharacter).length === 0 && selectedCharacter.constructor === Object) {\n            setErrorMessages([\"Please Select a Character\"])\n            setIserror(true)\n            return\n        }\n        // No object has been selected yet.\n        var payload = {\n            \"character_id\": selectedCharacter.id,\n            \"item_id\": selectedItem.ID\n        }\n        // Purchase the selected item\n        ApiClient.post(\"/buy/\", payload, {\n            headers: {\n                authorization: \"bearer \" + window.localStorage.getItem('authToken')\n            }\n        })\n            .then(res => {\n                console.log(res)\n                setData(res.data.data)\n                setIserror(false)\n                sumCost(res.data.data)\n            }).catch(error => {\n                setErrorMessages([\"Cannot purchase Item\"])\n                setIserror(true)\n            })\n    }\n\n    const onItemAutofillChange = (event, values) => {\n        setSelectedItem(values)\n    }\n\n    const onCharAutofillChange = async (event, values) => {\n        console.log(\"Character selected: \", values)\n        setSelectedCharacter(values)\n    }\n\n    const getItemNames = () => {\n        ApiClient.get(\"/names/\")\n            .then(res => {\n                setItems(res.data.items)\n            })\n            .catch(error => {\n                setErrorMessages([\"Cannot load item names\"])\n                setIserror(true)\n            })\n    }\n\n    const getCharacters = () => {\n        ApiClient.get(\"/characters/\", {\n            headers: {\n                authorization: \"bearer \" + window.localStorage.getItem('authToken')\n            }\n        })\n            .then(res => {\n                setCharacters(res.data.data)\n                setSelectedCharacter(res.data.data[0])\n            })\n            .catch(error => {\n                setErrorMessages([\"Cannot load character names\"])\n                setIserror(true)\n            })\n    }\n\n    const getInventory = () => {\n        ApiClient.get(\"/inventory/\"+selectedCharacter.id, {\n            headers: {\n                authorization: \"bearer \" + window.localStorage.getItem('authToken')\n            }\n        })\n            .then(res => {\n                setData(res.data.data)\n                sumCost(res.data.data)\n            })\n            .catch(error => {\n                setErrorMessages([\"Cannot load inventory data\"])\n                setIserror(true)\n            })\n    }\n\n    const handleRowDelete = (oldData) => {\n        // No object has been selected yet.\n        var payload = {\n            \"character_id\": selectedCharacter.id,\n            \"item_id\": selectedItem.ID\n        }\n        ApiClient.post(\"/sell/\", payload, {\n            headers: {\n                authorization: \"bearer \" + window.localStorage.getItem('authToken')\n            }\n        })\n            .then(res => {\n                console.log(\"made it\")\n                const dataDelete = [...data];\n                oldData.count--\n                if (oldData.count === 0) {\n                    const index = oldData.tableData.id;\n                    dataDelete.splice(index, 1);\n                    setData([...dataDelete]);\n                }\n                console.log(\"Finished?\")\n                sumCost(dataDelete)\n            })\n            .catch(error => {\n                setErrorMessages([\"Delete failed! Server error\"])\n                setIserror(true)\n            })\n    }\n\n    useEffect(() => {\n        // Load the inventory Data\n        getInventory()\n    }, [selectedCharacter])\n    useEffect(() => {\n        // Get item names for use in the purchase dropdown\n        getItemNames()\n        // Get the characters\n        getCharacters()\n    }, [])\n\n    var columns = [\n        { title: \"id\", field: \"id\", hidden: true },\n        { title: \"user_id\", field: \"user_id\", hidden: true },\n        { title: \"item_id\", field: \"user_id\", hidden: true },\n        { title: \"Item Name\", field: \"Item.name\" },\n        { title: \"Cost\", field: \"Item.cost\", type: \"numeric\" },\n        { title: \"Count\", field: \"count\", type: \"numeric\" }\n    ]\n\n    return (\n        <div className=\"App\">\n            <Grid container spacing={3}>\n                <Grid item xs={2} />\n                <Grid item xs={4}>\n                    <Card className={classes.root}>\n                        <CardHeader title=\"Purchase an Item\" />\n                        <div className={classes.details}>\n                            <CardContent>\n                                <Autocomplete\n                                    id=\"purchase-selection\"\n                                    options={items}\n                                    getOptionLabel={(option) => option.Name}\n                                    style={{ width: 300 }}\n                                    onChange={onItemAutofillChange}\n                                    renderInput={(params) => <TextField {...params} label=\"Item to purchase\" variant=\"outlined\" />}\n                                />\n                            </CardContent>\n                            <CardContent>\n                                <Button variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={buyItem}>\n                                    Purchase\n                                </Button>\n                            </CardContent>\n                        </div>\n                    </Card>\n\n                </Grid>\n                <Grid item xs={4}>\n                    <div className={classes.info}>\n                        <Card className={classes.mergecard} square={true}>\n                            <CardHeader title=\"Inventory Cost:\" />\n                            <div className={classes.details}>\n                                <CardContent>\n                                    <Typography variant=\"h4\">{costTotal} gp</Typography>\n                                </CardContent>\n                            </div>\n                        </Card>\n                        <Card className={classes.mergecard} square={true}>\n                            <div className={classes.details}>\n                                <CardContent>\n                                    <Autocomplete\n                                        id=\"character-selection\"\n                                        value={selectedCharacter}\n                                        options={characters}\n                                        getOptionLabel={(option) => option.name}\n                                        style={{ width: 300 }}\n                                        onChange={onCharAutofillChange}\n                                        renderInput={(params) => <TextField {...params} label=\"Character\" variant=\"outlined\" />}\n                                    />\n                                </CardContent>\n                            </div>\n                        </Card>\n                    </div>\n                </Grid>\n                <Grid item xs={1} />\n                <Grid item xs={2} />\n                <Grid item xs={8}>\n                    <div>\n                        {iserror &&\n                            <Alert severity=\"error\">\n                                {errorMessages.map((msg, i) => {\n                                    return <div key={i}>{msg}</div>\n                                })}\n                            </Alert>\n                        }\n                    </div>\n                    <MaterialTable\n                        title=\"Items Owned\"\n                        columns={columns}\n                        data={data}\n                        icons={tableIcons}\n                        editable={{\n                            onRowDelete: (oldData) =>\n                                new Promise((resolve) => {\n                                    handleRowDelete(oldData)\n                                    resolve()\n                                }),\n                        }}\n                        options={{\n                            actionsColumnIndex: -1\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={1}></Grid>\n            </Grid >\n        </div >\n    )\n}","/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/character-table.js",[],"/home/robertt/projects/BagOfHolding/ui/bag-of-holding/src/components/api-client.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":8,"column":12,"nodeType":"66","messageId":"67","endLine":8,"endColumn":20},{"ruleId":"68","severity":1,"message":"69","line":22,"column":8,"nodeType":"70","endLine":22,"endColumn":10,"suggestions":"71"},{"ruleId":"64","severity":1,"message":"72","line":27,"column":22,"nodeType":"66","messageId":"67","endLine":27,"endColumn":30},{"ruleId":"68","severity":1,"message":"73","line":201,"column":8,"nodeType":"70","endLine":201,"endColumn":27,"suggestions":"74"},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'loggedIn' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setLoggedIn'. Either include it or remove the dependency array.","ArrayExpression",["77"],"'useTheme' is defined but never used.","React Hook useEffect has a missing dependency: 'getInventory'. Either include it or remove the dependency array.",["78"],"no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},"Update the dependencies array to be: [setLoggedIn]",{"range":"83","text":"84"},"Update the dependencies array to be: [getInventory, selectedCharacter]",{"range":"85","text":"86"},[651,653],"[setLoggedIn]",[7401,7420],"[getInventory, selectedCharacter]"]