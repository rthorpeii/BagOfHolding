{"version":3,"sources":["components/authcontext.js","components/api-client.js","components/character-table.js","components/authbutton.js","components/header.js","components/inventory/character-card.js","components/inventory/consumed-table.js","components/inventory/buy-item-card.js","components/inventory/table.js","components/inventory/page.js","components/itemtable/itemtable.js","components/tabbar.js","App.js","reportWebVitals.js","index.js"],"names":["AuthContext","createContext","ApiClient","axios","create","baseURL","headers","window","localStorage","getItem","CharacterTable","useState","characters","setCharacters","iserror","setIserror","errorMessages","setErrorMessages","useEffect","get","then","res","data","catch","error","className","Grid","container","spacing","item","xs","sm","Alert","severity","map","msg","i","title","columns","field","hidden","editable","onRowAdd","newData","Promise","resolve","newCharacter","undefined","name","post","concat","character","handleRowAdd","onRowDelete","oldData","delete","id","dataDelete","index","tableData","splice","handleRowDelete","options","actionsColumnIndex","paging","search","jwt","require","AuthButton","setLoggedIn","useContext","mounted","token","decodedToken","decode","complete","dateNow","Date","exp","getTime","createAuthRefreshInterceptor","failedRequest","tokenRefreshResponse","setItem","defaults","Authorization","response","config","onFailure","console","log","onLoginSuccess","tokenObj","id_token","onLogoutSuccess","removeItem","Consumer","loggedIn","clientId","buttonText","render","renderProps","Button","variant","onClick","disabled","theme","onSuccess","cookiePolicy","isSignedIn","useStyles","makeStyles","root","flexGrow","Header","classes","AppBar","position","Toolbar","Typography","_","mergecard","flexDirection","height","costText","paddingTop","CharacterCard","props","costTotal","onChange","selected","setSelected","length","Card","CardContent","Autocomplete","value","getOptionLabel","option","renderInput","params","TextField","label","ConsumedTable","consumed","actions","icon","tooltip","rowData","onRemove","rowStyle","backgroundColor","outerCard","itemDropdown","paddingBottom","BuyItemCard","items","setItems","Name","buyItem","Table","owned","InventoryPage","setOwned","setConsumed","setCharacter","setCostTotal","validateCharacter","constructor","Object","keys","cost","useTheme","Columns","useMediaQuery","breakpoints","down","type","cellStyle","padding","headerStyle","Hidden","smDown","md","payload","ID","consume","character_id","item_id","ItemTable","setData","onRowUpdate","errorList","push","rarity","patch","dataUpdate","handleRowUpdate","dataToAdd","pageSize","pageSizeOptions","TabBar","setValue","handleChange","newValue","Tabs","Tab","createMuiTheme","palette","App","TabPanel","children","other","Box","p","ThemeProvider","CssBaseline","Container","shadows","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","AppWrapper","Provider","StrictMode","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7ca81be0.chunk.js","sourcesContent":["import {createContext} from 'react'\n\nconst AuthContext = createContext(null);\n\nexport default AuthContext","import axios from 'axios';\nvar USER_API = process.env.NODE_ENV === 'production' ? 'https://handy-haversack.herokuapp.com/api/' : 'http://localhost:8080/api/'\nexport const ApiClient = axios.create({\n  baseURL: USER_API,\n  headers: {'Authorization': \"Bearer \" + window.localStorage.getItem('authToken')}\n});\n\nexport default ApiClient","import Grid from '@material-ui/core/Grid'\nimport Alert from '@material-ui/lab/Alert';\nimport MaterialTable from \"@material-table/core\";\nimport { useState, useEffect } from 'react';\n\nimport ApiClient from './api-client'\n\nexport default function CharacterTable() {\n    const [characters, setCharacters] = useState([]);\n    const [iserror, setIserror] = useState(false)\n    const [errorMessages, setErrorMessages] = useState([])\n\n    const handleRowAdd = (newCharacter, resolve) => {\n        if (newCharacter.name === undefined) {\n            setErrorMessages([\"Please enter character name\"])\n            setIserror(true)\n            return\n        }\n        ApiClient.post(\"/characters/\", newCharacter)\n            .then(res => {\n                setCharacters(characters.concat(res.data.character));\n                setIserror(false)\n            })\n            .catch(error => {\n                setErrorMessages([\"Cannot add data. Server error!\" + error])\n                setIserror(true)\n            })\n    }\n\n    const handleRowDelete = (oldData, resolve) => {\n        ApiClient.delete(\"/characters/\" + oldData.id)\n            .then(res => {\n                const dataDelete = [...characters];\n                const index = oldData.tableData.id;\n                dataDelete.splice(index, 1);\n                setCharacters([...dataDelete]);\n                setErrorMessages([])\n            })\n            .catch(error => {\n                setErrorMessages([\"Delete failed! Server error\"])\n                setIserror(true)\n            })\n    }\n\n    useEffect(() => {\n        ApiClient.get(\"/characters/\")\n            .then(res => {\n                setCharacters(res.data.characters)\n            })\n            .catch(error => {\n                setErrorMessages([\"Cannot load character data\"])\n                setIserror(true)\n            })\n    }, [])\n\n    var columns = [\n        { title: \"id\", field: \"id\", hidden: true },\n        { title: \"Character name\", field: \"name\" },\n    ]\n\n    return (\n        <div className=\"App\">\n            <Grid container spacing={1}>\n                <Grid item xs={2}></Grid>\n                <Grid item xs={12} sm={8}>\n                    <div>\n                        {iserror &&\n                            <Alert severity=\"error\">\n                                {errorMessages.map((msg, i) => {\n                                    return <div key={i}>{msg}</div>\n                                })}\n                            </Alert>\n                        }\n                    </div>\n                    <MaterialTable\n                        title=\"Your Characters\"\n                        columns={columns}\n                        data={characters}\n                        editable={{\n                            onRowAdd: (newData) =>\n                                new Promise((resolve) => {\n                                    handleRowAdd(newData)\n                                    resolve()\n                                }),\n                            onRowDelete: (oldData) =>\n                                new Promise((resolve) => {\n                                    handleRowDelete(oldData, resolve)\n                                    resolve()\n                                }),\n                        }}\n                        options={{\n                            actionsColumnIndex: -1,\n                            paging: false,\n                            search: false\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={3}>\n\n                </Grid>\n            </Grid >\n        </div >\n    )\n}","import createAuthRefreshInterceptor from 'axios-auth-refresh';\nimport { Button } from '@material-ui/core';\nimport { useContext, useEffect } from 'react';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\n\nimport ApiClient from './api-client'\nimport AuthContext from './authcontext.js'\n\nvar jwt = require('jsonwebtoken');\n\nfunction AuthButton() {\n\n    const { setLoggedIn } = useContext(AuthContext)\n    useEffect(() => {\n        let mounted = true;\n        const token = localStorage.getItem('authToken');\n        if (token === null) {\n            if (mounted) {\n                setLoggedIn(false)\n            }\n            return () => mounted = false;\n        }\n        var decodedToken = jwt.decode(token, { complete: true })\n        var dateNow = new Date();\n\n        if (decodedToken.exp < dateNow.getTime()) {\n            if (mounted) {\n                setLoggedIn(true)\n            }\n        }\n        return () => mounted = false;\n    }, [setLoggedIn])\n\n\n    // Function that will be called to refresh authorization\n    const refreshAuthLogic = failedRequest => ApiClient.get('/refresh').then(tokenRefreshResponse => {\n        localStorage.setItem('authToken', tokenRefreshResponse.data.token);\n        ApiClient.defaults.headers.Authorization = \"Bearer \" + tokenRefreshResponse.data.token;\n        failedRequest.response.config.headers['Authorization'] = 'Bearer ' + tokenRefreshResponse.data.token;\n        return Promise.resolve();\n    });\n\n    // Instantiate the interceptor (you can chain it as it returns the axios instance)\n    createAuthRefreshInterceptor(ApiClient, refreshAuthLogic);\n\n    const onFailure = (response) => {\n        console.log(response);\n    }\n\n    const onLoginSuccess = (response) => {\n        ApiClient.post(\"/login\", { token: response.tokenObj.id_token })\n            .then(res => {\n                window.localStorage.setItem('authToken', res.data.token);\n                ApiClient.defaults.headers.Authorization = \"Bearer \" + res.data.token;\n                setLoggedIn(true)\n            })\n            .catch(error => {\n                console.log(\"Authentication failed\")\n            })\n    }\n\n    const onLogoutSuccess = (response) => {\n        window.localStorage.removeItem('authToken')\n        setLoggedIn(false)\n    }\n    return (\n        <AuthContext.Consumer>\n            {({ loggedIn }) => (\n                <div>\n                    { loggedIn ?\n                        <GoogleLogout\n                            clientId=\"1090301103642-op1uhu99i3naegpk86siaqqf4nddn0c1.apps.googleusercontent.com\"\n                            buttonText='Logout'\n                            onLogoutSuccess={onLogoutSuccess}\n                            onFailure={onFailure}\n                            render={renderProps => (\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={renderProps.onClick}\n                                    disabled={renderProps.disabled}\n                                >Logout</Button>\n                            )}\n                            theme=\"dark\"\n                        />\n                        : <GoogleLogin\n                            clientId=\"1090301103642-op1uhu99i3naegpk86siaqqf4nddn0c1.apps.googleusercontent.com\"\n                            buttonText=\"Login\"\n                            onSuccess={onLoginSuccess}\n                            onFailure={onFailure}\n                            cookiePolicy={'single_host_origin'}\n                            isSignedIn={true}\n                            theme=\"dark\"\n                        />\n                    }\n                </div>\n            )}\n        </AuthContext.Consumer>\n    )\n}\n\nexport default AuthButton;","import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AuthButton from \"./authbutton\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function Header() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Handy Haversack\n                    </Typography>\n                    <AuthButton />\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { Card, CardContent, makeStyles, TextField, Typography } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport ApiClient from '../api-client'\n\nconst useStyles = makeStyles((_) => ({\n    mergecard: {\n        flexDirection: \"column\",\n        height: \"100%\",\n    },\n    costText: {\n        paddingTop: '10px',\n    }\n}));\n\nexport default function CharacterCard(props) {\n    const classes = useStyles();\n\n    const { costTotal, onChange } = props\n    const [characters, setCharacters] = useState([])\n    const [selected, setSelected] = useState({})\n\n    const getCharacters = () => {\n        ApiClient.get(\"/characters/\")\n            .then(res => {\n                setCharacters(res.data.characters)\n                if (res.data.characters.length > 0) {\n                    setSelected(res.data.characters[0])\n                }\n            })\n            .catch(error => {\n                console.log(\"Cannot load character names\")\n            })\n    }\n\n    // When the selected value is updated, alert the parent\n    useEffect(() => {\n        onChange(selected)\n    }, [selected, onChange])\n\n    // On init load the characters\n    useEffect(() => {\n        getCharacters()\n    }, [])\n\n    return (\n        <Card className={classes.mergecard}>\n            <CardContent>\n                <Autocomplete\n                    id=\"character-selection\"\n                    value={selected}\n                    options={characters}\n                    getOptionLabel={(option) => option.name}\n                    onChange={(_, value) => { setSelected(value) }}\n                    renderInput={(params) => <TextField {...params} label=\"Character\" variant=\"outlined\" />}\n                />\n                <Typography variant=\"h6\" className={classes.costText}>\n                    Inventory Cost: {costTotal} gp\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}","import MaterialTable from \"@material-table/core\";\n\n\nexport default function ConsumedTable(props) {\n    const { consumed, removeItem, columns } = props\n\n    const onRemove = (oldData, consumed) => {\n        removeItem(oldData, consumed)\n    }\n    return (\n        <MaterialTable\n            title=\"Consumed Items\"\n            columns={columns}\n            data={consumed}\n            actions={[\n                {\n                    icon: 'restore',\n                    tooltip: 'Undo consume',\n                    onClick: (_, rowData) => new Promise((resolve) => {\n                        onRemove(rowData, true)\n                        resolve()\n                    }),\n                }\n            ]}\n            options={{\n                actionsColumnIndex: -1,\n                paging: false,\n                rowStyle: (rowData, index) => {\n                    if (index % 2) {\n                        return { backgroundColor: \"#333333\" }\n                    }\n                },\n                search: false,\n            }}\n        />\n    )\n}","import { useState, useEffect } from 'react';\nimport { Button, Card, CardContent, makeStyles, TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport ApiClient from '../api-client'\n\nconst useStyles = makeStyles((_) => ({\n    outerCard: {\n        flexDirection: \"column\",\n        height: \"100%\",\n    },\n    itemDropdown: {\n        paddingBottom: \"10px\",\n    }\n}));\n\nexport default function BuyItemCard(props) {\n    const classes = useStyles();\n    const [items, setItems] = useState([])    // Item data for predicting item fill\n    const [selected, setSelected] = useState({})\n\n    const buyItem = () => {\n        props.buyItem(selected)\n    }\n\n    useEffect(() => {\n        ApiClient.get(\"/names/\")\n            .then(res => {\n                setItems(res.data.items)\n            })\n            .catch(error => {\n                console.log(\"Cannot load item names\")\n            })\n    }, [])\n\n    return (\n        <Card className={classes.outerCard}>\n            <CardContent>\n                <Autocomplete\n                    className={classes.itemDropdown}\n                    options={items}\n                    getOptionLabel={(option) => option.Name}\n                    onChange={(_, value) => { setSelected(value) }}\n                    renderInput={(params) => <TextField {...params} label=\"Item to buy\" variant=\"outlined\" />}\n                />\n                <Button variant=\"contained\"\n                    onClick={buyItem}>\n                    Buy Item\n                </Button>\n            </CardContent>\n        </Card>\n    )\n}","import MaterialTable from \"@material-table/core\";\n\nexport default function Table(props) {\n    const { owned, removeItem, columns } = props\n\n    const onRemove = (oldData, consumed) => {\n        removeItem(oldData, consumed)\n    }\n    return (\n        <MaterialTable\n            title=\"Owned Items\"\n            columns={columns}\n            data={owned}\n            editable={{\n                onRowDelete: (oldData) =>\n                    new Promise((resolve) => {\n                        onRemove(oldData, false)\n                        resolve()\n                    }),\n            }}\n            actions={[\n                {\n                    icon: 'emoji_food_beverage',\n                    tooltip: 'Consume',\n                    onClick: (_, rowData) => new Promise((resolve) => {\n                        onRemove(rowData, true)\n                        resolve()\n                    }),\n                }\n            ]}\n            options={{\n                actionsColumnIndex: -1,\n                paging: false,\n                rowStyle: (rowData, index) => {\n                    if (index % 2) {\n                        return { backgroundColor: \"#333333\" }\n                    }\n                },\n                search: false,\n            }}\n        />\n    )\n}","import { useState, useEffect } from 'react';\nimport { Grid, Hidden } from '@material-ui/core/';\nimport Alert from '@material-ui/lab/Alert';\n\nimport ApiClient from '../api-client'\nimport CharacterCard from './character-card'\nimport ConsumedTable from './consumed-table'\nimport BuyItemCard from './buy-item-card';\nimport Table from './table';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\n\n\nexport default function InventoryPage() {\n    const [owned, setOwned] = useState([]); // owned items\n    const [consumed, setConsumed] = useState([]); // consumed items\n    const [character, setCharacter] = useState({})\n    const [costTotal, setCostTotal] = useState(0)\n\n    //for error handling\n    const [iserror, setIserror] = useState(false)\n    const [errorMessages, setErrorMessages] = useState([])\n\n    // Validates that a character is selected\n    const validateCharacter = () => {\n        console.log(\"Character: \", character)\n        if (character === null || (character.constructor === Object && Object.keys(character).length === 0)) {\n            setErrorMessages([\"Please select a character. If you have no characters, add one in the Characters tab\"])\n            setIserror(true)\n            return false\n        }\n        return true\n    }\n\n    // Handles buying an item\n    const buyItem = (item) => {\n        if (Object.keys(item).length === 0 && item.constructor === Object) {\n            setErrorMessages([\"Please Select an Item\"])\n            setIserror(true)\n            return\n        }\n        if (!validateCharacter()) {\n            return\n        }\n        var payload = {\n            \"character_id\": character.id,\n            \"item_id\": item.ID\n        }\n        // Buy the selected item\n        ApiClient.post(\"/buy/\", payload)\n            .then(res => {\n                setOwned(res.data.owned)\n                setConsumed(res.data.consumed)\n                setCostTotal(res.data.cost)\n                setIserror(false)\n            }).catch(error => {\n                setErrorMessages([\"Cannot Buy Item\"])\n                setIserror(true)\n            })\n    }\n\n    // Handles selling an item\n    const removeItem = (oldData, consume) => {\n        var payload = {\n            \"character_id\": oldData.character_id,\n            \"item_id\": oldData.item_id\n        }\n        ApiClient.post(consume ? \"/consume/\" : \"/sell/\", payload)\n            .then(res => {\n                setOwned(res.data.owned)\n                setConsumed(res.data.consumed)\n                setCostTotal(res.data.cost)\n                setIserror(false)\n            })\n            .catch(error => {\n                setErrorMessages([\"Delete failed! Server error\", error.error])\n                setIserror(true)\n            })\n    }\n\n    const unconsumeItem = (oldData, consume) => {\n        var payload = {\n            \"character_id\": oldData.character_id,\n            \"item_id\": oldData.item_id\n        }\n        ApiClient.post(\"/unconsume/\", payload)\n            .then(res => {\n                setOwned(res.data.owned)\n                setConsumed(res.data.consumed)\n                setCostTotal(res.data.cost)\n                setIserror(false)\n            })\n            .catch(error => {\n                setErrorMessages([\"Delete failed! Server error\", error.error])\n                setIserror(true)\n            })\n    }\n\n    // Update the inventory when a character is selected\n    useEffect(() => {\n        let mounted = true\n        if (mounted) {\n            if (!validateCharacter()) {\n                return\n            }\n        }\n        ApiClient.get(\"/inventory/\" + character.id)\n            .then(res => {\n                if (mounted) {\n                    setOwned(res.data.owned)\n                    setConsumed(res.data.consumed)\n                    setCostTotal(res.data.cost)\n                    setIserror(false)\n                }\n            })\n            .catch(error => {\n                if (mounted) {\n                    setErrorMessages([\"Cannot load inventory data\"])\n                    setIserror(true)\n                }\n            })\n\n        return () => mounted = false;\n    }, [character])\n\n    // Columns used in the tables\n    const theme = useTheme();\n    var sizeMatches = useMediaQuery(theme.breakpoints.down(\"xs\"))\n    const Columns = [\n        { title: \"id\", field: \"id\", hidden: true },\n        { title: \"user_id\", field: \"user_id\", hidden: true },\n        { title: \"item_id\", field: \"user_id\", hidden: true },\n        { title: \"Name\", field: \"Item.name\" },\n        { title: \"Rarity\", field: \"Item.rarity\", hidden: sizeMatches },\n        {\n            title: \"Cost\",\n            field: \"Item.cost\",\n            type: \"numeric\",\n            cellStyle: { padding: 1 },\n            headerStyle: { padding: 1 },\n\n        },\n        { title: \"Qty\", field: \"count\", type: \"numeric\", },\n    ]\n\n    return (\n        <div className=\"App\">\n            <Grid container spacing={1}>\n                <Hidden smDown>\n                    <Grid item md={2} />\n                </Hidden>\n                <Grid item xs={12} sm={6} md={4}>\n                    <CharacterCard\n                        onChange={setCharacter}\n                        costTotal={costTotal} />\n                </Grid>\n                <Grid item xs={12} sm={6} md={4}>\n                    <BuyItemCard\n                        buyItem={buyItem} />\n                </Grid>\n                <Hidden smDown>\n                    <Grid item md={1} />\n                    <Grid item md={2} />\n                </Hidden>\n                <Grid item xs={12} md={8}>\n                    <div>\n                        {iserror &&\n                            <Alert severity=\"error\">\n                                {errorMessages.map((msg, i) => {\n                                    return <div key={i}>{msg}</div>\n                                })}\n                            </Alert>\n                        }\n                    </div>\n                    <Table\n                        owned={owned}\n                        removeItem={removeItem}\n                        columns={Columns} />\n                </Grid>\n                <Hidden smDown>\n                    <Grid item md={1}></Grid>\n                    <Grid item md={2} />\n                </Hidden>\n                <Grid item xs={12} md={8}>\n                    <ConsumedTable\n                        consumed={consumed}\n                        removeItem={unconsumeItem}\n                        columns={Columns} />\n                </Grid>\n            </Grid >\n        </div >\n    )\n}","import { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid'\nimport Alert from '@material-ui/lab/Alert';\nimport MaterialTable from \"@material-table/core\";\n\nimport AuthContext from '../authcontext'\nimport ApiClient from '../api-client'\n\nexport default function ItemTable() {\n\n    const [data, setData] = useState([]); //table data\n\n    //for error handling\n    const [iserror, setIserror] = useState(false)\n    const [errorMessages, setErrorMessages] = useState([])\n\n    const handleRowAdd = (newData, resolve) => {\n        //validation\n        let errorList = []\n        if (newData.name === undefined) {\n            errorList.push(\"Please enter item name\")\n        } if (newData.type === undefined) {\n            errorList.push(\"Please enter item type\")\n        } if (newData.rarity === undefined) {\n            errorList.push(\"Please enter rarity\")\n        } if (newData.cost === undefined || newData.cost < 0) {\n            errorList.push(\"Please enter a proper cost\")\n        } if (errorList.length < 1) { //no error\n            ApiClient.post(\"/items\", newData)\n                .then(res => {\n                    let dataToAdd = [...data];\n                    newData.id = res.data.data.id\n                    dataToAdd.push(newData);\n                    setData(dataToAdd);\n                    setErrorMessages([])\n                    setIserror(false)\n                })\n                .catch(error => {\n                    setErrorMessages([\"Cannot add data. Server error!\"])\n                    setIserror(true)\n                })\n        } else {\n            setErrorMessages(errorList)\n            setIserror(true)\n        }\n    }\n\n    const handleRowDelete = (oldData, resolve) => {\n        ApiClient.delete(\"/items/\" + oldData.id)\n            .then(res => {\n                const dataDelete = [...data];\n                const index = oldData.tableData.id;\n                dataDelete.splice(index, 1);\n                setData([...dataDelete]);\n            })\n            .catch(error => {\n                setErrorMessages([\"Delete failed! Server error\"])\n                setIserror(true)\n            })\n    }\n\n    const handleRowUpdate = (newData, oldData, resolve) => {  //validation\n        let errorList = []\n        if (newData.name === undefined) {\n            errorList.push(\"Please enter item name\")\n        } if (newData.type === undefined) {\n            errorList.push(\"Please enter item type\")\n        } if (newData.rarity === undefined) {\n            errorList.push(\"Please enter rarity\")\n        } if (newData.cost === undefined || newData.cost < 0) {\n            errorList.push(\"Please enter a proper cost\")\n        }\n\n        if (errorList.length < 1) {\n            ApiClient.patch(\"/items/\" + newData.id, newData)\n                .then(res => {\n                    const dataUpdate = [...data];\n                    const index = oldData.tableData.id;\n                    dataUpdate[index] = newData;\n                    setData([...dataUpdate]);\n                    setIserror(false)\n                    setErrorMessages([])\n                })\n                .catch(error => {\n                    setErrorMessages([\"Update failed! Server error\"])\n                    setIserror(true)\n                })\n        } else {\n            setErrorMessages(errorList)\n            setIserror(true)\n        }\n    }\n\n\n    useEffect(() => {\n        ApiClient.get(\"/items\")\n            .then(res => {\n                setData(res.data.data)\n            })\n            .catch(error => {\n                setErrorMessages([\"Cannot load item data\", error.error])\n                setIserror(true)\n            })\n    }, [])\n\n    var columns = [\n        { title: \"id\", field: \"id\", hidden: true },\n        { title: \"Item name\", field: \"name\" },\n        { title: \"Type\", field: \"type\" },\n        { title: \"Rarity\", field: \"rarity\" },\n        { title: \"Cost\", field: \"cost\", type: \"numeric\" }\n    ]\n\n    return (\n        <AuthContext.Consumer>\n            {({ loggedIn }) => (\n                <div className=\"App\">\n                    <Grid container spacing={1}>\n                        <Grid item xs={2}></Grid>\n                        <Grid item xs={12} sm={8}>\n                            <div>\n                                {iserror &&\n                                    <Alert severity=\"error\">\n                                        {errorMessages.map((msg, i) => {\n                                            return <div key={i}>{msg}</div>\n                                        })}\n                                    </Alert>\n                                }\n                            </div>\n                            <MaterialTable\n                                title=\"Defined Items\"\n                                columns={columns}\n                                data={data}\n\n                                editable={{\n                                    onRowUpdate: loggedIn ? (newData, oldData) =>\n                                        new Promise((resolve) => {\n                                            handleRowUpdate(newData, oldData, resolve);\n                                            resolve()\n                                        }) : null,\n                                    onRowAdd: loggedIn ? (newData) =>\n                                        new Promise((resolve) => {\n                                            handleRowAdd(newData)\n                                            resolve()\n                                        }) : null,\n                                    onRowDelete: loggedIn ? (oldData) =>\n                                        new Promise((resolve) => {\n                                            handleRowDelete(oldData, resolve)\n                                            resolve()\n                                        }) : null,\n                                }}\n                                options={{\n                                    actionsColumnIndex: -1,\n                                    pageSize: 10,\n                                    pageSizeOptions: [10, 25, 50, ],\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={3}></Grid>\n                    </Grid >\n                </div >\n            )}\n        </AuthContext.Consumer>\n    )\n}","import { Tabs, Tab } from '@material-ui/core';\n\nimport AuthContext from './authcontext'\n\nexport default function TabBar(props) {\n    const {value, setValue} = props\n    const handleChange = (_, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n        <AuthContext.Consumer>\n            {({ loggedIn }) => (\n                <Tabs value={value} onChange={handleChange}>\n                    <Tab label=\"Items\" />\n                    <Tab label=\"Inventory\" disabled={!loggedIn} />\n                    <Tab label=\"Characters\" disabled={!loggedIn} />\n                </Tabs>\n            )}\n        </AuthContext.Consumer>\n    )\n}","import { Box, Container, CssBaseline, ThemeProvider } from '@material-ui/core';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { useContext, useEffect, useState } from 'react';\n\nimport AuthContext from './components/authcontext'\n\nimport CharacterTable from './components/character-table';\nimport Header from './components/header'\nimport InventoryPage from './components/inventory/page';\nimport ItemTable from './components/itemtable/itemtable';\nimport TabBar from './components/tabbar';\n\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark',\n    },\n});\n\ntheme.shadows = []\n\nexport default function App() {\n    const [value, setValue] = useState(0);\n    const { loggedIn } = useContext(AuthContext)\n\n    function TabPanel(props) {\n        const { children, value, index, ...other } = props;\n        return (\n            <div {...other}>\n                {value === index && <Box p={3}>{children}</Box>}\n            </div>\n        );\n    }\n\n    // Return to the items tab if logged out\n    useEffect(()=> {\n        if (!loggedIn) {\n            setValue(0)\n        }\n    }, [loggedIn])\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <Header />\n            <Container>\n                <TabBar value={value} setValue={setValue} />\n            </Container>\n            <TabPanel value={value} index={0}>\n                <ItemTable />\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                <InventoryPage />\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n                <CharacterTable />\n            </TabPanel>\n        </ThemeProvider>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport AuthContext from './components/authcontext'\n\nconst AppWrapper = () => {\n  const [loggedIn, setLoggedIn] = useState(false)\n\n  return (\n    <AuthContext.Provider value={{ loggedIn, setLoggedIn }}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </AuthContext.Provider>\n  )\n}\n\nReactDOM.render(\n  <AppWrapper />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}