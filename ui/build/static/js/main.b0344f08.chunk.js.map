{"version":3,"sources":["components/authcontext.js","components/api-client.js","components/character-table.js","components/authbutton.js","components/header.js","components/inventory/character-card.js","components/inventory/consumed-table.js","components/inventory/purchase-card.js","components/inventory/table.js","components/inventory/page.js","components/itemtable/itemtable.js","App.js","reportWebVitals.js","index.js"],"names":["AuthContext","createContext","ApiClient","axios","create","baseURL","headers","window","localStorage","getItem","CharacterTable","useState","data","setData","iserror","setIserror","errorMessages","setErrorMessages","useEffect","get","then","res","catch","error","className","Grid","container","spacing","item","xs","sm","Alert","severity","map","msg","i","title","columns","field","hidden","editable","onRowAdd","newData","Promise","resolve","errorList","undefined","name","push","length","post","dataToAdd","id","handleRowAdd","onRowDelete","oldData","delete","dataDelete","index","tableData","splice","handleRowDelete","options","actionsColumnIndex","search","jwt","require","AuthButton","setLoggedIn","useContext","mounted","token","decodedToken","decode","complete","dateNow","Date","exp","getTime","createAuthRefreshInterceptor","failedRequest","tokenRefreshResponse","setItem","defaults","Authorization","response","config","onFailure","console","log","onLoginSuccess","tokenObj","id_token","onLogoutSuccess","removeItem","Consumer","loggedIn","clientId","buttonText","theme","onSuccess","cookiePolicy","isSignedIn","useStyles","makeStyles","root","flexGrow","Header","classes","AppBar","position","Toolbar","Typography","variant","_","mergecard","flexDirection","height","gold","paddingTop","CharacterCard","props","costTotal","onChange","characters","setCharacters","selected","setSelected","Card","CardContent","Autocomplete","value","getOptionLabel","option","renderInput","params","TextField","label","ConsumedTable","consumed","actions","icon","tooltip","onClick","rowData","onRemove","rowStyle","backgroundColor","PurchaseCard","items","setItems","md","Name","Button","buyItem","Table","owned","InventoryPage","setOwned","setConsumed","character","setCharacter","setCostTotal","useTheme","Columns","useMediaQuery","breakpoints","down","type","cellStyle","padding","headerStyle","validateCharacter","Object","keys","constructor","ownedCost","reduce","a","b","Item","cost","count","consumedCost","Number","payload","ID","consume","character_id","item_id","endpoint","ItemTable","onRowUpdate","rarity","patch","dataUpdate","handleRowUpdate","createMuiTheme","palette","App","setValue","handleChange","newValue","TabPanel","children","other","Box","p","ThemeProvider","CssBaseline","Container","Tabs","Tab","disabled","shadows","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","AppWrapper","Provider","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0344f08.chunk.js","sourcesContent":["import {createContext} from 'react'\n\nconst AuthContext = createContext(null);\n\nexport default AuthContext","import axios from 'axios';\n\nexport const ApiClient = axios.create({\n  // Production\n  baseURL: 'https://handy-haversack.herokuapp.com/api/',\n  \n  // Development\n  // baseURL: 'http://localhost:8080/api/',\n\n  headers: {'Authorization': \"Bearer \" + window.localStorage.getItem('authToken')}\n});\n\nexport default ApiClient","import { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid'\nimport Alert from '@material-ui/lab/Alert';\nimport MaterialTable from \"@material-table/core\";\n\nimport ApiClient from './api-client'\n\nexport default function CharacterTable() {\n    const [data, setData] = useState([]); //table data\n\n    //for error handling\n    const [iserror, setIserror] = useState(false)\n    const [errorMessages, setErrorMessages] = useState([])\n\n    const handleRowAdd = (newData, resolve) => {\n        //validation\n        let errorList = []\n        if (newData.name === undefined) {\n            errorList.push(\"Please enter character name\")\n        } if (errorList.length < 1) { //no error\n            ApiClient.post(\"/characters/\", newData)\n                .then(res => {\n                    let dataToAdd = [...data];\n                    newData.id = res.data.data.id\n                    dataToAdd.push(newData);\n                    setData(dataToAdd);\n                    setErrorMessages([])\n                    setIserror(false)\n                })\n                .catch(error => {\n                    setErrorMessages([\"Cannot add data. Server error!\"])\n                    setIserror(true)\n                })\n        } else {\n            setErrorMessages(errorList)\n            setIserror(true)\n        }\n    }\n\n    const handleRowDelete = (oldData, resolve) => {\n        ApiClient.delete(\"/characters/\" + oldData.id)\n            .then(res => {\n                const dataDelete = [...data];\n                const index = oldData.tableData.id;\n                dataDelete.splice(index, 1);\n                setData([...dataDelete]);\n            })\n            .catch(error => {\n                setErrorMessages([\"Delete failed! Server error\"])\n                setIserror(true)\n            })\n    }\n\n    useEffect(() => {\n        ApiClient.get(\"/characters/\")\n            .then(res => {\n                setData(res.data.data)\n            })\n            .catch(error => {\n                setErrorMessages([\"Cannot load character data\"])\n                setIserror(true)\n            })\n    }, [])\n\n    var columns = [\n        { title: \"id\", field: \"id\", hidden: true },\n        { title: \"Character name\", field: \"name\" },\n    ]\n\n    return (\n        <div className=\"App\">\n            <Grid container spacing={1}>\n                <Grid item xs={2}></Grid>\n                <Grid item xs={12} sm={8}>\n                    <div>\n                        {iserror &&\n                            <Alert severity=\"error\">\n                                {errorMessages.map((msg, i) => {\n                                    return <div key={i}>{msg}</div>\n                                })}\n                            </Alert>\n                        }\n                    </div>\n                    <MaterialTable\n                        title=\"Your Characters\"\n                        columns={columns}\n                        data={data}\n                        editable={{\n                            onRowAdd: (newData) =>\n                                new Promise((resolve) => {\n                                    handleRowAdd(newData)\n                                    resolve()\n                                }),\n                            onRowDelete: (oldData) =>\n                                new Promise((resolve) => {\n                                    handleRowDelete(oldData, resolve)\n                                    resolve()\n                                }),\n                        }}\n                        options={{\n                            actionsColumnIndex: -1,\n                            search: false\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={3}>\n                    \n                </Grid>\n            </Grid >\n        </div >\n    )\n}","import createAuthRefreshInterceptor from 'axios-auth-refresh';\nimport { useContext, useEffect } from 'react';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\n\nimport ApiClient from './api-client'\nimport AuthContext from './authcontext.js'\n\nvar jwt = require('jsonwebtoken');\n\nfunction AuthButton() {\n\n    const { setLoggedIn } = useContext(AuthContext)\n    useEffect(() => {\n        let mounted = true;\n        const token = localStorage.getItem('authToken');\n        if (token === null) {\n            if (mounted) {\n                setLoggedIn(false)\n            }\n            return () => mounted = false;\n        }\n        var decodedToken = jwt.decode(token, { complete: true })\n        var dateNow = new Date();\n\n        if (decodedToken.exp < dateNow.getTime()) {\n            if (mounted) {\n                setLoggedIn(true)\n            }\n        }\n        return () => mounted = false;\n    }, [setLoggedIn])\n\n\n    // Function that will be called to refresh authorization\n    const refreshAuthLogic = failedRequest => ApiClient.get('/refresh').then(tokenRefreshResponse => {\n        localStorage.setItem('authToken', tokenRefreshResponse.data.token);\n        ApiClient.defaults.headers.Authorization = \"Bearer \" + tokenRefreshResponse.data.token;\n        failedRequest.response.config.headers['Authorization'] = 'Bearer ' + tokenRefreshResponse.data.token;\n        return Promise.resolve();\n    });\n\n    // Instantiate the interceptor (you can chain it as it returns the axios instance)\n    createAuthRefreshInterceptor(ApiClient, refreshAuthLogic);\n\n    const onFailure = (response) => {\n        console.log(response);\n    }\n\n    const onLoginSuccess = (response) => {\n        ApiClient.post(\"/login\", { token: response.tokenObj.id_token })\n            .then(res => {\n                window.localStorage.setItem('authToken', res.data.token);\n                ApiClient.defaults.headers.Authorization = \"Bearer \" + res.data.token;\n                setLoggedIn(true)\n            })\n            .catch(error => {\n                console.log(\"Authentication failed\")\n            })\n    }\n\n    const onLogoutSuccess = (response) => {\n        window.localStorage.removeItem('authToken')\n        setLoggedIn(false)\n    }\n    return (\n        <AuthContext.Consumer>\n            {({ loggedIn }) => (\n                <div>\n                    { loggedIn ?\n                        <GoogleLogout\n                            clientId=\"1090301103642-op1uhu99i3naegpk86siaqqf4nddn0c1.apps.googleusercontent.com\"\n                            buttonText='Logout'\n                            onLogoutSuccess={onLogoutSuccess}\n                            onFailure={onFailure}\n                            theme=\"dark\"\n                        />\n                        : <GoogleLogin\n                            clientId=\"1090301103642-op1uhu99i3naegpk86siaqqf4nddn0c1.apps.googleusercontent.com\"\n                            buttonText=\"Login\"\n                            onSuccess={onLoginSuccess}\n                            onFailure={onFailure}\n                            cookiePolicy={'single_host_origin'}\n                            isSignedIn={true}\n                            theme=\"dark\"\n                        />\n                    }\n                </div>\n            )}\n        </AuthContext.Consumer>\n    )\n}\n\nexport default AuthButton;","import { AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AuthButton from \"./authbutton\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function Header() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Bag of Holding\n                    </Typography>\n                    <AuthButton />\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { Card, CardContent, makeStyles, TextField, Typography } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport ApiClient from '../api-client'\n\nconst useStyles = makeStyles((_) => ({\n    mergecard: {\n        flexDirection: \"column\",\n        height: \"100%\",\n    },\n    gold: {\n        paddingTop: '10px',\n    }\n}));\n\nexport default function CharacterCard(props) {\n    const classes = useStyles();\n\n    const {costTotal, onChange} = props\n    const [characters, setCharacters] = useState([])\n    const [selected, setSelected] = useState({})\n\n    const getCharacters = () => {\n        ApiClient.get(\"/characters/\")\n            .then(res => {\n                setCharacters(res.data.data)\n                setSelected(res.data.data[0])\n            })\n            .catch(error => {\n                console.log(\"Cannot load character names\")\n            })\n    }\n    \n    // When the selected value is updated, alert the parent\n    useEffect(() => {\n        onChange(selected)\n    }, [selected, onChange])\n\n    // On init load the characters\n    useEffect(() => {\n        getCharacters()\n    }, [])\n\n    return (\n        <Card className={classes.mergecard}>\n            <CardContent>\n                <Autocomplete\n                    id=\"character-selection\"\n                    value={selected}\n                    options={characters}\n                    getOptionLabel={(option) => option.name}\n                    onChange={(_, value) => { setSelected(value) }}\n                    renderInput={(params) => <TextField {...params} label=\"Character\" variant=\"outlined\" />}\n                />\n                <Typography variant=\"h6\" className={classes.gold}>\n                    Inventory Cost: {costTotal} gp\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}","import MaterialTable from \"@material-table/core\";\n\n\nexport default function ConsumedTable(props) {\n    const { consumed, removeItem, columns } = props\n\n    const onRemove = (oldData, consumed) => {\n        removeItem(oldData, consumed)\n    }\n    return (\n        <MaterialTable\n            title=\"Consumed Items\"\n            columns={columns}\n            data={consumed}\n            actions={[\n                {\n                    icon: 'restore',\n                    tooltip: 'Undo consume',\n                    onClick: (_, rowData) => new Promise((resolve) => {\n                        onRemove(rowData, true)\n                        resolve()\n                    }),\n                }\n            ]}\n            options={{\n                actionsColumnIndex: -1,\n                rowStyle: (rowData, index) => {\n                    if (index % 2) {\n                        return { backgroundColor: \"#333333\" }\n                    }\n                },\n                search: false,\n            }}\n        />\n    )\n}","import { useState, useEffect } from 'react';\nimport { Button, Card, CardContent, Grid, makeStyles, TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport ApiClient from '../api-client'\n\nconst useStyles = makeStyles((_) => ({\n    root: {\n        height: \"100%\",\n    }\n}));\n\nexport default function PurchaseCard(props) {\n    const classes = useStyles();\n    const [items, setItems] = useState([])    // Item data for predicting item fill\n    const [selected, setSelected] = useState({})\n\n    const buyItem = () => {\n        props.buyItem(selected)\n    }\n\n    useEffect(() => {\n        ApiClient.get(\"/names/\")\n            .then(res => {\n                setItems(res.data.items)\n            })\n            .catch(error => {\n                console.log(\"Cannot load item names\")\n            })\n    }, [])\n\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} sm={12} md={7}>\n                        <Autocomplete\n                            id=\"purchase-selection\"\n                            options={items}\n                            getOptionLabel={(option) => option.Name}\n                            onChange={(_, value) => { setSelected(value) }}\n                            renderInput={(params) => <TextField {...params} label=\"Item to purchase\" variant=\"outlined\" />}\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={12} md={5}>\n                        <Button variant=\"contained\"\n                            onClick={buyItem}>\n                            Purchase\n                        </Button>\n                    </Grid>\n                </Grid>\n            </CardContent>\n        </Card>\n    )\n}","import MaterialTable from \"@material-table/core\";\n\nexport default function Table(props) {\n    const { owned, removeItem, columns } = props\n\n    const onRemove = (oldData, consumed) => {\n        removeItem(oldData, consumed)\n    }\n    return (\n        <MaterialTable\n            title=\"Owned Items\"\n            columns={columns}\n            data={owned}\n            editable={{\n                onRowDelete: (oldData) =>\n                    new Promise((resolve) => {\n                        onRemove(oldData, false)\n                        resolve()\n                    }),\n            }}\n            actions={[\n                {\n                    icon: 'emoji_food_beverage',\n                    tooltip: 'Consume',\n                    onClick: (_, rowData) => new Promise((resolve) => {\n                        onRemove(rowData, true)\n                        resolve()\n                    }),\n                }\n            ]}\n            options={{\n                actionsColumnIndex: -1,\n                rowStyle: (rowData, index) => {\n                    if (index % 2) {\n                        return { backgroundColor: \"#333333\" }\n                    }\n                },\n                search: false,\n            }}\n        />\n    )\n}","import { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid'\nimport Alert from '@material-ui/lab/Alert';\n\nimport ApiClient from '../api-client'\nimport CharacterCard from './character-card'\nimport ConsumedTable from './consumed-table'\nimport PurchaseCard from './purchase-card';\nimport Table from './table';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\n\n\nexport default function InventoryPage() {\n    const [owned, setOwned] = useState([]); // owned items\n    const [consumed, setConsumed] = useState([]); // consumed items\n    const [character, setCharacter] = useState({})\n    const [costTotal, setCostTotal] = useState(0)\n\n    //for error handling\n    const [iserror, setIserror] = useState(false)\n    const [errorMessages, setErrorMessages] = useState([])\n\n    const theme = useTheme();\n    var sizeMatches = useMediaQuery(theme.breakpoints.down(\"xs\"))\n    const Columns = [\n        { title: \"id\", field: \"id\", hidden: true },\n        { title: \"user_id\", field: \"user_id\", hidden: true },\n        { title: \"item_id\", field: \"user_id\", hidden: true },\n        { title: \"Name\", field: \"Item.name\" },\n        { title: \"Rarity\", field: \"Item.rarity\", hidden: sizeMatches },\n        {\n            title: \"Cost\",\n            field: \"Item.cost\",\n            type: \"numeric\",\n            cellStyle: { padding: 0 },\n            headerStyle: { padding: 0 },\n\n        },\n        {\n            title: \"Count\", field: \"count\", type: \"numeric\",\n            cellStyle: { padding: 0 },\n            headerStyle: { padding: 0 },\n        },\n    ]\n\n    // Validates that a character is selected\n    const validateCharacter = () => {\n        if (Object.keys(character).length === 0 && character.constructor === Object) {\n            setErrorMessages([\"Please Select a Character\"])\n            setIserror(true)\n            return false\n        }\n        return true\n    }\n\n    // Handles purchasing an item\n    const buyItem = (item) => {\n        if (Object.keys(item).length === 0 && item.constructor === Object) {\n            setErrorMessages([\"Please Select an Item\"])\n            setIserror(true)\n            return\n        }\n        if (!validateCharacter()) {\n            return\n        }\n        var payload = {\n            \"character_id\": character.id,\n            \"item_id\": item.ID\n        }\n        // Purchase the selected item\n        ApiClient.post(\"/buy/\", payload)\n            .then(res => {\n                setOwned(res.data.owned)\n                setConsumed(res.data.consumed)\n                setIserror(false)\n            }).catch(error => {\n                setErrorMessages([\"Cannot purchase Item\"])\n                setIserror(true)\n            })\n    }\n\n    // Handles selling an item\n    const removeItem = (oldData, consume) => {\n        var payload = {\n            \"character_id\": oldData.character_id,\n            \"item_id\": oldData.item_id\n        }\n        // What endpoint should we post to\n        var endpoint = \"/sell/\"\n        if (consume === true) {\n            endpoint = \"/consume/\"\n        }\n        ApiClient.post(endpoint, payload)\n            .then(res => {\n                setOwned(res.data.owned)\n                setConsumed(res.data.consumed)\n                setIserror(false)\n            })\n            .catch(error => {\n                setErrorMessages([\"Delete failed! Server error\", error.error])\n                setIserror(true)\n            })\n    }\n\n    const unconsumeItem = (oldData, consume) => {\n        var payload = {\n            \"character_id\": oldData.character_id,\n            \"item_id\": oldData.item_id\n        }\n        ApiClient.post(\"/unconsume/\", payload)\n            .then(res => {\n                setOwned(res.data.owned)\n                setConsumed(res.data.consumed)\n                setIserror(false)\n            })\n            .catch(error => {\n                setErrorMessages([\"Delete failed! Server error\", error.error])\n                setIserror(true)\n            })\n    }\n\n    // Update the inventory when a character is selected\n    useEffect(() => {\n        let mounted = true\n        if (mounted) {\n            if (!validateCharacter()) {\n                return\n            }\n        }\n        ApiClient.get(\"/inventory/\" + character.id)\n            .then(res => {\n                if (mounted) {\n                    setOwned(res.data.owned)\n                    setConsumed(res.data.consumed)\n                    setIserror(false)\n                }\n            })\n            .catch(error => {\n                if (mounted) {\n                    setErrorMessages([\"Cannot load inventory data\"])\n                    setIserror(true)\n                }\n            })\n\n        return () => mounted = false;\n    }, [character])\n\n    // Set the error message to false on init\n    useEffect(() => {\n        let mounted = true\n        if (mounted) {\n            setIserror(false)\n            setErrorMessages([])\n        }\n        return () => mounted = false;\n    }, [])\n\n    // Update the cost of the inventory when owned/consumed is updated\n    useEffect(() => {\n        console.log(owned)\n        let mounted = true\n        var ownedCost = [owned.reduce((a, b) => a + (b.Item.cost * b.count || 0), 0)]\n        var consumedCost = [consumed.reduce((a, b) => a + (b.Item.cost * b.count || 0), 0)]\n        if (mounted) {\n            setCostTotal(Number(ownedCost) + Number(consumedCost))\n        }\n        return () => mounted = false;\n    }, [owned, consumed])\n\n    return (\n        <div className=\"App\">\n            <Grid container spacing={1}>\n                <Grid item sm={12} md={2} />\n                <Grid item xs={12} sm={6} md={4}>\n                    <CharacterCard\n                        onChange={setCharacter}\n                        costTotal={costTotal} />\n                </Grid>\n                <Grid item xs={12} sm={6} md={4}>\n                    <PurchaseCard\n                        buyItem={buyItem} />\n                </Grid>\n                <Grid item sm={1} />\n                <Grid item sm={1} md={2} />\n                <Grid item xs={12} md={8}>\n                    <div>\n                        {iserror &&\n                            <Alert severity=\"error\">\n                                {errorMessages.map((msg, i) => {\n                                    return <div key={i}>{msg}</div>\n                                })}\n                            </Alert>\n                        }\n                    </div>\n                    <Table\n                        owned={owned}\n                        removeItem={removeItem}\n                        columns={Columns} />\n                </Grid>\n                <Grid item xs={1}></Grid>\n                <Grid item sm={1} md={2} />\n                <Grid item xs={12} md={8}>\n                    <ConsumedTable\n                        consumed={consumed}\n                        removeItem={unconsumeItem}\n                        columns={Columns} />\n                </Grid>\n            </Grid >\n        </div >\n    )\n}","import { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid'\nimport Alert from '@material-ui/lab/Alert';\nimport MaterialTable from \"@material-table/core\";\n\nimport AuthContext from '../authcontext'\nimport ApiClient from '../api-client'\n\nexport default function ItemTable() {\n\n    const [data, setData] = useState([]); //table data\n\n    //for error handling\n    const [iserror, setIserror] = useState(false)\n    const [errorMessages, setErrorMessages] = useState([])\n\n    const handleRowAdd = (newData, resolve) => {\n        //validation\n        let errorList = []\n        if (newData.name === undefined) {\n            errorList.push(\"Please enter item name\")\n        } if (newData.type === undefined) {\n            errorList.push(\"Please enter item type\")\n        } if (newData.rarity === undefined) {\n            errorList.push(\"Please enter rarity\")\n        } if (newData.cost === undefined || newData.cost < 0) {\n            errorList.push(\"Please enter a proper cost\")\n        } if (errorList.length < 1) { //no error\n            ApiClient.post(\"/items\", newData)\n                .then(res => {\n                    let dataToAdd = [...data];\n                    newData.id = res.data.data.id\n                    dataToAdd.push(newData);\n                    setData(dataToAdd);\n                    setErrorMessages([])\n                    setIserror(false)\n                })\n                .catch(error => {\n                    setErrorMessages([\"Cannot add data. Server error!\"])\n                    setIserror(true)\n                })\n        } else {\n            setErrorMessages(errorList)\n            setIserror(true)\n        }\n    }\n\n    const handleRowDelete = (oldData, resolve) => {\n        ApiClient.delete(\"/items/\" + oldData.id)\n            .then(res => {\n                const dataDelete = [...data];\n                const index = oldData.tableData.id;\n                dataDelete.splice(index, 1);\n                setData([...dataDelete]);\n            })\n            .catch(error => {\n                setErrorMessages([\"Delete failed! Server error\"])\n                setIserror(true)\n            })\n    }\n\n    const handleRowUpdate = (newData, oldData, resolve) => {  //validation\n        let errorList = []\n        if (newData.name === undefined) {\n            errorList.push(\"Please enter item name\")\n        } if (newData.type === undefined) {\n            errorList.push(\"Please enter item type\")\n        } if (newData.rarity === undefined) {\n            errorList.push(\"Please enter rarity\")\n        } if (newData.cost === undefined || newData.cost < 0) {\n            errorList.push(\"Please enter a proper cost\")\n        }\n\n        if (errorList.length < 1) {\n            ApiClient.patch(\"/items/\" + newData.id, newData)\n                .then(res => {\n                    const dataUpdate = [...data];\n                    const index = oldData.tableData.id;\n                    dataUpdate[index] = newData;\n                    setData([...dataUpdate]);\n                    setIserror(false)\n                    setErrorMessages([])\n                })\n                .catch(error => {\n                    setErrorMessages([\"Update failed! Server error\"])\n                    setIserror(true)\n                })\n        } else {\n            setErrorMessages(errorList)\n            setIserror(true)\n        }\n    }\n\n\n    useEffect(() => {\n        ApiClient.get(\"/items\")\n            .then(res => {\n                setData(res.data.data)\n            })\n            .catch(error => {\n                setErrorMessages([\"Cannot load item data\", error.error])\n                setIserror(true)\n            })\n    }, [])\n\n    var columns = [\n        { title: \"id\", field: \"id\", hidden: true },\n        { title: \"Item name\", field: \"name\" },\n        { title: \"Type\", field: \"type\" },\n        { title: \"Rarity\", field: \"rarity\" },\n        { title: \"Cost\", field: \"cost\", type: \"numeric\" }\n    ]\n\n    return (\n        <AuthContext.Consumer>\n            {({ loggedIn }) => (\n                <div className=\"App\">\n                    <Grid container spacing={1}>\n                        <Grid item xs={2}></Grid>\n                        <Grid item xs={12} sm={8}>\n                            <div>\n                                {iserror &&\n                                    <Alert severity=\"error\">\n                                        {errorMessages.map((msg, i) => {\n                                            return <div key={i}>{msg}</div>\n                                        })}\n                                    </Alert>\n                                }\n                            </div>\n                            <MaterialTable\n                                title=\"Defined Items\"\n                                columns={columns}\n                                data={data}\n\n                                editable={{\n                                    onRowUpdate: loggedIn ? (newData, oldData) =>\n                                        new Promise((resolve) => {\n                                            handleRowUpdate(newData, oldData, resolve);\n                                            resolve()\n                                        }) : null,\n                                    onRowAdd: loggedIn ? (newData) =>\n                                        new Promise((resolve) => {\n                                            handleRowAdd(newData)\n                                            resolve()\n                                        }) : null,\n                                    onRowDelete: loggedIn ? (oldData) =>\n                                        new Promise((resolve) => {\n                                            handleRowDelete(oldData, resolve)\n                                            resolve()\n                                        }) : null,\n                                }}\n                                options={{\n                                    actionsColumnIndex: -1\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={3}></Grid>\n                    </Grid >\n                </div >\n            )}\n        </AuthContext.Consumer>\n    )\n}","import { useState } from 'react';\nimport { Box, Tabs, Tab, Container, CssBaseline, ThemeProvider } from '@material-ui/core';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nimport AuthContext from './components/authcontext'\nimport CharacterTable from './components/character-table';\nimport Header from './components/header'\nimport InventoryPage from './components/inventory/page';\nimport ItemTable from './components/itemtable/itemtable';\n\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark',\n    },\n});\n\ntheme.shadows = []\n\nexport default function App() {\n    const [value, setValue] = useState(0);\n    const handleChange = (_, newValue) => {\n        setValue(newValue);\n    };\n\n    function TabPanel(props) {\n        const { children, value, index, ...other } = props;\n        return (\n            <div {...other}>\n                {value === index && <Box p={3}>{children}</Box>}\n            </div>\n        );\n    }\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <Header />\n            <Container>\n                <AuthContext.Consumer>\n                    {({ loggedIn }) => (\n                        <Tabs value={value} onChange={handleChange}>\n                            <Tab label=\"Items\" />\n                            <Tab label=\"Inventory\" disabled={!loggedIn} />\n                            <Tab label=\"Characters\" disabled={!loggedIn} />\n                        </Tabs>\n                    )}\n                </AuthContext.Consumer>\n            </Container>\n            <TabPanel value={value} index={0}>\n                <ItemTable />\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                <InventoryPage />\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n                <CharacterTable />\n            </TabPanel>\n        </ThemeProvider>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport AuthContext from './components/authcontext'\n\nconst AppWrapper = () => {\n  const [loggedIn, setLoggedIn] = useState(false)\n\n  return (\n    <AuthContext.Provider value={{ loggedIn, setLoggedIn }}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </AuthContext.Provider>\n  )\n}\n\nReactDOM.render(\n  <AppWrapper />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}